version: "3.9"

services:
  # Kafka broker (KRaft mode - no Zookeeper needed)
  kafka:
    image: bitnami/kafka:3.8
    container_name: wiber-kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      # KRaft mode configuration
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      # Listeners
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:9094"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"

      # Development settings
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"

      # Cluster ID
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"

      # JVM options
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"

    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-lc",
          "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 15

    networks:
      - wiber-net

  # MongoDB database
  mongodb:
    image: mongo:6.0
    container_name: wiber-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-lc",
          "echo 'db.runCommand({ ping: 1 })' | mongosh --quiet mongodb://localhost:27017",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - wiber-net

  # AKHQ - Kafka GUI for monitoring
  akhq:
    image: tchiotludo/akhq:latest
    container_name: wiber-akhq
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          server:
            port: 8080
          connections:
            wiber-cluster:
              properties:
                bootstrap.servers: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - wiber-net

  # REST API Service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: wiber-api
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TOPIC: "wiber.messages"
      MONGO_URI: "mongodb://mongodb:27017"
      MONGO_DB: "wiber"
      MONGO_COLLECTION: "messages"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/liveness"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - wiber-net

  # Consumer Service (reads from Kafka, writes to MongoDB)
  consumer:
    build:
      context: ..
      dockerfile: docker/Dockerfile.consumer
    container_name: wiber-consumer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TOPIC: "wiber.messages"
      KAFKA_CONSUMER_GROUP: "wiber-consumers"
      MONGO_URI: "mongodb://mongodb:27017"
      MONGO_DB: "wiber"
      MONGO_COLLECTION: "messages"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - wiber-net
    # Scale consumers for load balancing:
    # docker compose up -d --scale consumer=3

volumes:
  mongodb_data:
    driver: local

networks:
  wiber-net:
    driver: bridge
